Main = (init; {rec, rec2}!; mark)!; removeNodeMark!; removeEdges!; removeEdgesMark!; removeEdges2!

init(a,b:string; c:int)
[
    (n1, a)
    (n2, b)
    |
    (e1, n1, n2, c)
]
=>
[
    (n1, a)
    (n2(R), b)
    |
    (e1, n1, n2, c)
]
interface = {n1, n2}

rec(a,b,c,d,e:string; f,g:int)
[
    (n1, a # green)
    (n2, b)
    (n3(R), c)
    (n4, d)
    (n5, e)
    |
    (e1, n1, n3, f)
    (e2, n3, n5, empty)
    (e3, n2, n4, g)
    (e4, n4, n5, empty)
]
=>
[
    (n1, a # green)
    (n2, b)
    (n3(R), c)
    (n4, d # blue)
    (n5, e)
    |
    (e1, n1, n3, f)
    (e2, n3, n5, empty)
    (e3, n2, n4, g)
    (e4, n4, n5, empty)
    (e5, n1, n4, a.d # blue)
]
interface = {n1, n2, n3, n4, n5}
where f >= 80 and g >= 80 and not edge(n1, n4)

rec2(a,b,c,d,e:string; f,g:int)
[
    (n1, a # green)
    (n2, b)
    (n3(R), c)
    (n4, d # red)
    (n5, e)
    |
    (e1, n1, n3, f)
    (e2, n3, n5, empty)
    (e3, n2, n4, g)
    (e4, n4, n5, empty)
]
=>
[
    (n1, a # green)
    (n2, b)
    (n3(R), c)
    (n4, d # blue)
    (n5, e)
    |
    (e1, n1, n3, f)
    (e2, n3, n5, empty)
    (e3, n2, n4, g)
    (e4, n4, n5, empty)
    (e5, n1, n4, a.d # blue)
]
interface = {n1, n2, n3, n4, n5}
where f >= 80 and g >= 80 and not edge(n1, n4)

mark(a: string)
[
    (n1(R), a)
    |
]
=>
[
    (n1, a # red)
    |
]
interface = {n1}

removeNodeMark(a : string)
[
    (n1, a # any)
    |
]
=>
[
    (n1, a)
    |
]
interface = {n1}

removeEdges(a, b: string; c:int)
[
    (n1, a)
    (n2, b)
    |
    (e1, n1, n2, c)
]
=>
[
    (n1, a)
    (n2, b)
    |
]
interface = {n1, n2}

removeEdges2(a, b: string)
[
    (n1, a)
    (n2, b)
    |
    (e1, n1, n2, empty)
]
=>
[
    (n1, a)
    (n2, b)
    |
]
interface = {n1, n2}

removeEdgesMark(a, b, c: string)
[
    (n1, a)
    (n2, b)
    |
    (e1, n1, n2, c # blue)
]
=> 
[
    (n1, a)
    (n2, b)
    |
    (e1, n1, n2, c)
]
interface = {n1, n2}